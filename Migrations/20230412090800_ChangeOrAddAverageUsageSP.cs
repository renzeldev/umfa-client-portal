using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace ClientPortal.Migrations
{
    public partial class ChangeOrAddAverageUsageSP : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            //Config
            migrationBuilder.Sql("CREATE OR ALTER proc [dbo].[spAlarmConfigAvgUsage]\r\n(\r\n@MeterSerialNo nvarchar(250),\r\n@ProfileStartDTM smalldatetime,\r\n@ProfileEndDTM smalldatetime,\r\n@AvgStartTime time,\r\n@AvgEndTime time\r\n)\r\n\r\nAS\r\n\r\n--declare\r\n--@MeterSerialNo nvarchar(250) = '57770290',\r\n--@ProfileStartDTM smalldatetime = '2023-02-01 00:00',\r\n--@ProfileEndDTM smalldatetime = '2023-02-28 23:59',\r\n--@AvgStartTime time = '22:00',\r\n--@AvgEndTime time = '05:00'\r\n\r\ndeclare\r\n@TimeDiff int\r\n\r\ndeclare @tProfile table (Id int identity(1,1), ProfileId int, SerialNo varchar(250), ReadingDate smalldatetime, P1 decimal(18,4))\r\n\r\ninsert into @tProfile\r\nselect\r\np.Id, p.SerialNumber, p.ReadingDate, p.P1\r\nfrom\r\nScadaProfileData p (NOLOCK)\r\nwhere\r\np.SerialNumber = @MeterSerialNo\r\nand p.IsActive = 1\r\nand p.ReadingDate between @ProfileStartDTM and @ProfileEndDTM\r\norder by p.ReadingDate\r\n\r\nSELECT @TimeDiff =  DATEDIFF(MI, CONCAT('2023-04-01 ', @AvgStartTime), CONCAT(case when @AvgEndTime < @AvgStartTime then '2023-04-02 ' else '2023-04-01 ' end, @AvgEndTime)                    )\r\n\r\ndeclare @tData table (Id int identity(1,1), ReadingDate smalldatetime, ActFlow decimal(18,4), Calculated bit)\r\n\r\ninsert into @tData\r\nselect\r\nconvert(varchar(16), d.ReadingDate, 120) as ReadingDate,\r\nActFlow = d.P1,\r\nCalculated = case when d.Status = 0 then 0 else 1 end\r\nfrom\r\nScadaProfileData d (NOLOCK)\r\nwhere\r\nd.SerialNumber = @MeterSerialNo\r\nand d.ReadingDate >= @ProfileStartDTM and d.ReadingDate <= @ProfileEndDTM\r\nand d.isActive = 1\r\norder by\r\nd.ReadingDate\r\n\r\nselect ReadingDate, ActFlow as ActFlow, Calculated\r\n,case when (\r\n\t( cast(ReadingDate as time(0)) >= @AvgStartTime and cast(ReadingDate as time(0)) < cast('1900-01-01 23:59' as time(0)) ) or\r\n\t( cast(ReadingDate as time(0)) >= cast('1900-01-01 00:00' as time(0)) and cast(ReadingDate as time(0)) < @AvgEndTime )) then '#FF6600'\r\nelse '#00cc00' end as Color\r\nfrom @tData\r\n\r\nselect\r\nb.SerialNo as MeterSerial, MIN(b.ReadingStart) as PeriodStartDTM, MAX(b.ReadingEnd) as PeriodEndDTM\r\n, AVG(b.ProfileAverage) as IntervalAvg, AVG(b.AvgTotal) as PeriodAvg, MAX(b.AvgPeak) as AvgPeak, MIN(b.AvgMin) as AvgMin\r\nfrom\r\n(\r\nselect\r\na.Id,\r\np.SerialNo,\r\na.StartDTM as ReadingStart,\r\na.EndDTM as ReadingEnd,\r\nAVG(p.P1) as ProfileAverage,\r\nSUM(p.P1/2) as AvgTotal,\r\nMAX(p.P1) as AvgPeak,\r\nMIN(p.P1) as AvgMin\r\nfrom\r\n@tProfile p\r\njoin\r\n(\r\nselect\r\nId, ProfileId, SerialNo, ReadingDate as StartDTM, DATEADD(MI, @TimeDiff, ReadingDate) as EndDTM\r\nfrom @tProfile\r\nwhere\r\nDATEPART(HH, ReadingDate) = DATEPART(HH, @AvgStartTime)\r\nand DATEPART(MI, ReadingDate) = DATEPART(MI, @AvgStartTime)\r\n) a on (p.SerialNo = a.SerialNo and p.ReadingDate between a.StartDTM and a.EndDTM)\r\ngroup by\r\na.Id, a.StartDTM, a.EndDTM, p.SerialNo\r\n) b\r\ngroup by b.SerialNo");
            migrationBuilder.Sql("CREATE OR ALTER proc [dbo].[spAlarmAnalyzeAvgUsage]\r\n(\r\n@MeterSerialNo nvarchar(250),\r\n@ProfileStartDTM smalldatetime,\r\n@ProfileEndDTM smalldatetime,\r\n@AvgStartTime time,\r\n@AvgEndTime time,\r\n@Threshold decimal(18,4),\r\n@UseInterval bit = 0\r\n)\r\n\r\nAS\r\n\r\n--declare\r\n--@MeterSerialNo nvarchar(250) = '57770290',\r\n--@ProfileStartDTM smalldatetime = '2023-02-01 00:00',\r\n--@ProfileEndDTM smalldatetime = '2023-02-28 23:59',\r\n--@AvgStartTime time = '22:00',\r\n--@AvgEndTime time = '05:00',\r\n--@Threshold decimal(18,4) = 0.02,\r\n--@UseInterval bit = 0\r\n\r\ndeclare\r\n@TimeDiff int,\r\n@iCnt int = 1,\r\n@iRows int,\r\n@NoAlarms int = 0\r\n\r\ndeclare @tProfile table (Id int identity(1,1), ProfileId int, SerialNo varchar(250), ReadingDate smalldatetime, P1 decimal(18,4))\r\n\r\ninsert into @tProfile\r\nselect\r\np.Id, p.SerialNumber, p.ReadingDate, p.P1\r\nfrom\r\nScadaProfileData p (NOLOCK)\r\nwhere\r\np.SerialNumber = @MeterSerialNo\r\nand p.IsActive = 1\r\nand p.ReadingDate between @ProfileStartDTM and @ProfileEndDTM\r\norder by p.ReadingDate\r\n\r\nSELECT @TimeDiff =  DATEDIFF(MI, CONCAT('2023-04-01 ', @AvgStartTime), CONCAT(case when @AvgEndTime < @AvgStartTime then '2023-04-02 ' else '2023-04-01 ' end, @AvgEndTime))\r\n\r\n--first identify all occurences where threshold was exceeded\r\ndeclare @tResults table (Id int identity(1,1), SerialNo varchar(250), StartDTM smalldatetime, EndDTM smalldatetime, avgUsage decimal(18,6)\r\n\t\t\t\t\t\t, totUsage decimal(18,6))\r\n\r\ninsert into @tResults\r\nselect\r\np.SerialNo, a.StartDTM, a.EndDTM, AVG(p.P1) as avgUsage, SUM(p.P1/2) as totUsage\r\nfrom\r\n@tProfile p\r\njoin\r\n(\r\nselect\r\nId, ProfileId, SerialNo, ReadingDate as StartDTM, DATEADD(MI, @TimeDiff, ReadingDate) as EndDTM\r\nfrom @tProfile\r\nwhere\r\nDATEPART(HH, ReadingDate) = DATEPART(HH, @AvgStartTime)\r\nand DATEPART(MI, ReadingDate) = DATEPART(MI, @AvgStartTime)\r\n) a on (p.SerialNo = a.SerialNo and p.ReadingDate between a.StartDTM and a.EndDTM)\r\ngroup by\r\np.SerialNo, a.StartDTM, a.EndDTM\r\n\r\ndeclare @tData table (Id int identity(1,1), ReadingDate smalldatetime, ActFlow decimal(18,4), Calculated bit)\r\n\r\ninsert into @tData\r\nselect\r\nconvert(varchar(16), d.ReadingDate, 120) as ReadingDate,\r\nActFlow = d.P1,\r\nCalculated = case when d.Status = 0 then 0 else 1 end\r\nfrom\r\nScadaProfileData d (NOLOCK)\r\nwhere\r\nd.SerialNumber = @MeterSerialNo\r\nand d.ReadingDate >= @ProfileStartDTM and d.ReadingDate <= @ProfileEndDTM\r\nand d.isActive = 1\r\norder by\r\nd.ReadingDate\r\n\r\nif (@UseInterval = 1)\r\nbegin\r\n\tselect d.ReadingDate, d.ActFlow as ActFlow, d.Calculated\r\n\t,case when (a.Id is null) then '#00cc00' else 'red' end as Color\r\n\tfrom @tData d\r\n\tleft join\r\n\t(\r\n\tselect\r\n\tId, SerialNo, StartDTM, EndDTM\r\n\tfrom\r\n\t@tResults dd\r\n\twhere\r\n\tavgUsage >= @Threshold\r\n\t) a  on (d.ReadingDate between a.StartDTM and a.EndDTM)\r\n\r\nselect @NoAlarms = isnull(count(1), 0) from @tResults where avgUsage >= @Threshold\r\nend\r\nelse\r\nbegin\r\n\tselect d.ReadingDate, d.ActFlow as ActFlow, d.Calculated\r\n\t,case when (a.Id is null) then '#00cc00' else 'red' end as Color\r\n\tfrom @tData d\r\n\tleft join\r\n\t(\r\n\tselect\r\n\tId, SerialNo, StartDTM, EndDTM, AVG(totUsage) as perAvg\r\n\tfrom\r\n\t@tResults dd\r\n\tgroup by\r\n\tId, SerialNo, StartDTM, EndDTM\r\n\thaving\r\n\tAVG(totUsage) >= @Threshold\r\n\t) a  on (d.ReadingDate between a.StartDTM and a.EndDTM)\r\n\r\nselect @NoAlarms = isnull(count(1), 0)\r\nfrom\r\n@tResults dd\r\ngroup by\r\nId, SerialNo, StartDTM, EndDTM\r\nhaving\r\nAVG(totUsage) >= @Threshold\r\nend\r\n\r\nselect @NoAlarms as NoOfAlarms");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[spAlarmConfigAvgUsage]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[spAlarmAnalyzeAvgUsage]");
        }
    }
}
