using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace ClientPortal.Migrations
{
    public partial class ChangeAnalyzeBurstPipeSP : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql("CREATE OR ALTER proc [dbo].[spAlarmAnalyzeBurstPipe]\r\n(\r\n@MeterSerialNo nvarchar(250),\r\n@ProfileStartDTM smalldatetime,\r\n@ProfileEndDTM smalldatetime,\r\n@Threshold decimal(18,4),\r\n@Duration int\r\n)\r\n\r\nAS\r\n\r\n--declare\r\n--@MeterSerialNo nvarchar(250) = '57770290',\r\n--@ProfileStartDTM smalldatetime = '2023-02-01 00:00',\r\n--@ProfileEndDTM smalldatetime = '2023-02-28 23:59',\r\n--@Threshold decimal(18,4) = 0.04,\r\n--@Duration int = 2\r\n\r\ndeclare\r\n@TimeDiff int,\r\n@iCnt int = 1,\r\n@iRows int,\r\n@NoAlarms int = 0\r\n\r\nset @Duration = @Duration * 30\r\n\r\ndeclare @tProfile table (Id int identity(1,1), ProfileId int, SerialNo varchar(250), ReadingDate smalldatetime, P1 decimal(18,4))\r\n\r\ninsert into @tProfile\r\nselect\r\np.Id, p.SerialNumber, p.ReadingDate, p.P1\r\nfrom\r\nScadaProfileData p (NOLOCK)\r\nwhere\r\np.SerialNumber = @MeterSerialNo\r\nand p.IsActive = 1\r\nand p.ReadingDate between @ProfileStartDTM and @ProfileEndDTM\r\norder by p.ReadingDate\r\n\r\nSELECT @TimeDiff =  DATEDIFF(MI, '2023-04-01 00:00', DATEADD(MI, @Duration, '2023-04-01 00:00'))\r\n\r\n--first identify all occurences where threshold was exceeded\r\ndeclare @tResults table (Id int identity(1,1), SerialNo varchar(250), StartDTM smalldatetime, EndDTM smalldatetime, OccDTM smalldatetime, maxUsage decimal(18,4)\r\n\t\t\t\t\t\t, Duration int)\r\n\r\ninsert into @tResults\r\nselect\r\nSerialNo\r\n, ReadingDate\r\n, isnull(LEAD(ReadingDate) OVER (Order by Id), @ProfileEndDTM) as NextDate\r\n, ReadingDate, P1, 0\r\nfrom\r\n(\r\nselect\r\nId, ProfileId, SerialNo, ReadingDate,\r\nLAG(P1) OVER (order by ReadingDate) as PrevP1,\r\nP1, LEAD(P1) OVER (order by ReadingDate) as NextP1\r\nFrom\r\n@tProfile\r\n) a\r\nwhere\r\nP1 > @Threshold and NextP1 > @Threshold and PrevP1 <= @Threshold\r\norder by a.ReadingDate\r\n\r\nset @iRows = @@ROWCOUNT\r\nset @iCnt = 1\r\n\r\ndeclare @SerNo varchar(250), @SDTM smalldatetime, @EDTM smalldatetime, @OccDTM smalldatetime, @maxUsage decimal(18,4), @Dur int\r\n\r\nwhile @iCnt <= @iRows\r\nbegin\r\n\tselect @SerNo = SerialNo, @SDTM = StartDTM, @EDTM = EndDTM, @OccDTM = OccDTM, @maxUsage = maxUsage from @tResults where Id = @iCnt\r\n\r\nSELECT\r\n\t@Dur = ISNULL(SUM(DATEDIFF(MINUTE, t1.ReadingDate, t2.ReadingDate)), 0)\r\nFROM \r\n\t@tProfile t1\r\n\tJOIN @tProfile t2 ON t2.Id = t1.Id + 1\r\nWHERE \r\n\tt1.ReadingDate between @OccDTM and @EDTM\r\n\tand t1.P1 >= @Threshold AND t2.P1 >= @Threshold\r\n\r\n\tupdate @tResults set Duration = @Dur where Id = @iCnt\r\n\r\nset @iCnt += 1\r\nend\r\n\r\ndeclare @tAlarms table (Id int identity(1,1), AlarmStart smalldatetime, AlarmEnd smalldatetime, Duration int)\r\ninsert into @tAlarms\r\nselect OccDTM as AlarmStart, DATEADD(MI, Duration, OccDTM) as AlarmEnd, Duration from @tResults where Duration >= @Duration\r\n\r\ndeclare @tData table (Id int identity(1,1), ReadingDate smalldatetime, ActFlow decimal(18,4), Calculated bit)\r\n\r\ninsert into @tData\r\nselect\r\nconvert(varchar(16), d.ReadingDate, 120) as ReadingDate,\r\nActFlow = d.P1,\r\nCalculated = case when d.Status = 0 then 0 else 1 end\r\nfrom\r\nScadaProfileData d (NOLOCK)\r\nwhere\r\nd.SerialNumber = @MeterSerialNo\r\nand d.ReadingDate >= @ProfileStartDTM and d.ReadingDate <= @ProfileEndDTM\r\nand d.isActive = 1\r\norder by\r\nd.ReadingDate\r\n\r\nselect d.ReadingDate, d.ActFlow as ActFlow, d.Calculated\r\n,case when (dd.Id is null) then '#00cc00' else 'red' end as Color\r\nfrom @tData d\r\nleft join @tAlarms dd on (d.ReadingDate between dd.AlarmStart and dd.AlarmEnd)\r\n\r\nselect NoOfAlarms = count(1) from @tAlarms");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[spAlarmAnalyzeBurstPipe]");
        }
    }
}
