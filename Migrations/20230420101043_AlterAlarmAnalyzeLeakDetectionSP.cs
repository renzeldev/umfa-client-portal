using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace ClientPortal.Migrations
{
    public partial class AlterAlarmAnalyzeLeakDetectionSP : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql("CREATE OR ALTER proc [dbo].[spAlarmAnalyzeLeakDetection]\r\n(\r\n@MeterSerialNo nvarchar(250),\r\n@ProfileStartDTM smalldatetime,\r\n@ProfileEndDTM smalldatetime,\r\n@StartTime time,\r\n@EndTime time,\r\n@Threshold decimal(18,4),\r\n@Duration int\r\n)\r\n\r\nAS\r\n\r\n--declare\r\n--@MeterSerialNo nvarchar(250) = '57770290',\r\n--@ProfileStartDTM smalldatetime = '2023-02-01 00:00',\r\n--@ProfileEndDTM smalldatetime = '2023-02-28 23:59',\r\n--@StartTime time = '20:00',\r\n--@EndTime time = '04:00',\r\n--@Threshold decimal(18,4) = 0.002,\r\n--@Duration int = 60\r\n\r\ndeclare\r\n@TimeDiff int,\r\n@iCnt int = 1,\r\n@iRows int,\r\n@NoAlarms int = 0\r\n\r\ndeclare @tProfile table (Id int identity(1,1), ProfileId int, SerialNo varchar(250), ReadingDate smalldatetime, P1 decimal(18,4))\r\n\r\ninsert into @tProfile\r\nselect\r\np.Id, p.SerialNumber, p.ReadingDate, p.P1\r\nfrom\r\nScadaProfileData p (NOLOCK)\r\nwhere\r\np.SerialNumber = @MeterSerialNo\r\nand p.IsActive = 1\r\nand p.ReadingDate between @ProfileStartDTM and @ProfileEndDTM\r\norder by p.ReadingDate\r\n\r\nSELECT @TimeDiff =  DATEDIFF(MI, CONCAT('2023-04-01 ', @StartTime), CONCAT(case when @EndTime < @StartTime then '2023-04-02 ' else '2023-04-01 ' end, @EndTime))\r\n\r\n--first identify all occurences where threshold was exceeded\r\ndeclare @tResults table (Id int identity(1,1), SerialNo varchar(250), StartDTM smalldatetime, EndDTM smalldatetime, OccDTM smalldatetime, minUsage decimal(18,4)\r\n\t\t\t\t\t\t, Duration int)\r\n\r\ninsert into @tResults\r\nselect\r\nb.SerialNo, b.StartDTM, b.EndDTM\r\n, (select min(ReadingDate) from @tProfile where SerialNo = b.SerialNo and ReadingDate between b.StartDTM and b.EndDTM and P1 >= @Threshold) as OccDTM\r\n, b.minUsage, 0 as Duration\r\nfrom\r\n(\r\nselect\r\np.SerialNo, a.StartDTM, a.EndDTM, max(p.P1) as minUsage\r\nfrom\r\n@tProfile p\r\njoin\r\n(\r\nselect\r\nId, ProfileId, SerialNo, ReadingDate as StartDTM, DATEADD(MI, @TimeDiff, ReadingDate) as EndDTM\r\nfrom @tProfile\r\nwhere\r\nDATEPART(HH, ReadingDate) = DATEPART(HH, @StartTime)\r\nand DATEPART(MI, ReadingDate) = DATEPART(MI, @StartTime)\r\n) a on (p.SerialNo = a.SerialNo and p.ReadingDate between a.StartDTM and a.EndDTM)\r\ngroup by\r\np.SerialNo, a.StartDTM, a.EndDTM\r\nhaving max(p.P1) > @Threshold\r\n) b\r\n\r\nset @iRows = @@ROWCOUNT\r\nset @iCnt = 1\r\n\r\ndeclare @SerNo varchar(250), @SDTM smalldatetime, @EDTM smalldatetime, @OccDTM smalldatetime, @maxUsage decimal(18,4), @Dur int\r\n\r\nwhile @iCnt <= @iRows\r\nbegin\r\n\tselect @SerNo = SerialNo, @SDTM = StartDTM, @EDTM = EndDTM, @OccDTM = OccDTM, @maxUsage = minUsage from @tResults where Id = @iCnt\r\n\r\nSELECT \r\n\t@Dur = ISNULL(SUM(DATEDIFF(MINUTE, t1.ReadingDate, t2.ReadingDate)), 0)\r\nFROM \r\n\t@tProfile t1\r\n\tJOIN @tProfile t2 ON t2.Id = t1.Id + 1\r\nWHERE \r\n\tt1.ReadingDate between @OccDTM and @EDTM\r\n\tand t1.P1 >= @Threshold AND t2.P1 >= @Threshold\r\n\r\n\tupdate @tResults set Duration = @Dur where Id = @iCnt\r\n\r\nset @iCnt += 1\r\nend\r\n\r\ndeclare @tData table (Id int identity(1,1), ReadingDate smalldatetime, ActFlow decimal(18,4), Calculated bit)\r\n\r\ninsert into @tData\r\nselect\r\nconvert(varchar(16), d.ReadingDate, 120) as ReadingDate,\r\nActFlow = d.P1,\r\nCalculated = case when d.Status = 0 then 0 else 1 end\r\nfrom\r\nScadaProfileData d (NOLOCK)\r\nwhere\r\nd.SerialNumber = @MeterSerialNo\r\nand d.ReadingDate >= @ProfileStartDTM and d.ReadingDate <= @ProfileEndDTM\r\nand d.isActive = 1\r\norder by\r\nd.ReadingDate\r\n\r\nselect d.ReadingDate, d.ActFlow as ActFlow, d.Calculated\r\n,case when (dd.Id is null) then '#00cc00' else 'red' end as Color\r\nfrom @tData d\r\nleft join @tResults dd on (dd.Duration >= @Duration and d.ReadingDate >= dd.OccDTM and d.ReadingDate < DATEADD(MI, dd.Duration, dd.OccDTM))\r\n\r\nselect @NoAlarms = isnull(count(1), 0) from @tResults where Duration >= @Duration\r\n\r\nselect @NoAlarms as NoOfAlarms");
            migrationBuilder.Sql("CREATE OR ALTER proc [dbo].[spAlarmConfigPeakUsage]\r\n(\r\n@MeterSerialNo nvarchar(250),\r\n@ProfileStartDTM smalldatetime,\r\n@ProfileEndDTM smalldatetime,\r\n@PeakStartTime time,\r\n@PeakEndTime time,\r\n@NoOfPeaks int = 5\r\n)\r\n\r\nAS\r\n\r\n--declare\r\n--@MeterSerialNo nvarchar(250) = '57770290',\r\n--@ProfileStartDTM smalldatetime = '2023-02-01 00:00',\r\n--@ProfileEndDTM smalldatetime = '2023-02-28 23:59',\r\n--@PeakStartTime time = '08:00',\r\n--@PeakEndTime time = '20:00',\r\n--@NoOfPeaks int = 5\r\n\r\ndeclare\r\n@TimeDiff int\r\n\r\ndeclare @tProfile table (Id int identity(1,1), ProfileId int, SerialNo varchar(250), ReadingDate smalldatetime, P1 decimal(18,4))\r\n\r\ninsert into @tProfile\r\nselect\r\np.Id, p.SerialNumber, p.ReadingDate, p.P1\r\nfrom\r\nScadaProfileData p (NOLOCK)\r\nwhere\r\np.SerialNumber = @MeterSerialNo\r\nand p.IsActive = 1\r\nand p.ReadingDate between @ProfileStartDTM and @ProfileEndDTM\r\norder by p.ReadingDate\r\n\r\nSELECT @TimeDiff =  DATEDIFF(MI, CONCAT('2023-04-01 ', @PeakStartTime), CONCAT(case when @PeakEndTime < @PeakStartTime then '2023-04-02 ' else '2023-04-01 ' end, @PeakEndTime)                    )\r\n\r\ndeclare @tData table (Id int identity(1,1), ReadingDate smalldatetime, ActFlow decimal(18,4), Calculated bit)\r\n\r\ninsert into @tData\r\nselect\r\nconvert(varchar(16), d.ReadingDate, 120) as ReadingDate,\r\nActFlow = d.P1,\r\nCalculated = case when d.Status = 0 then 0 else 1 end\r\nfrom\r\nScadaProfileData d (NOLOCK)\r\nwhere\r\nd.SerialNumber = @MeterSerialNo\r\nand d.ReadingDate >= @ProfileStartDTM and d.ReadingDate <= @ProfileEndDTM\r\nand d.isActive = 1\r\norder by\r\nd.ReadingDate\r\n\r\ndeclare @tPeaks table (Id int identity(1,1), MeterSerial nvarchar(50), OccDTM smalldatetime, Peak decimal(18,4))\r\ninsert into @tPeaks\r\nselect top (@NoOfPeaks)\r\nb.SerialNo as MeterSerial\r\n, (select min(ReadingDate) from @tProfile where ReadingDate between b.ReadingStart and b.ReadingEnd and P1 = Peak) as OccDTM\r\n, b.Peak as Peak\r\nfrom\r\n(\r\nselect\r\na.Id,\r\np.SerialNo,\r\na.StartDTM as ReadingStart,\r\na.EndDTM as ReadingEnd,\r\nMAX(p.P1) as Peak\r\nfrom\r\n@tProfile p\r\njoin\r\n(select\r\nId, ProfileId, SerialNo, ReadingDate as StartDTM, DATEADD(MI, @TimeDiff, ReadingDate) as EndDTM\r\nfrom @tProfile\r\nwhere\r\nDATEPART(HH, ReadingDate) = DATEPART(HH, @PeakStartTime)\r\nand DATEPART(MI, ReadingDate) = DATEPART(MI, @PeakStartTime)\r\n) a on (p.SerialNo = a.SerialNo and p.ReadingDate between a.StartDTM and a.EndDTM)\r\ngroup by\r\na.Id, a.StartDTM, a.EndDTM, p.SerialNo\r\n) b\r\n\r\nselect d.ReadingDate, d.ActFlow as ActFlow, d.Calculated\r\n,case when (dd.OccDTM is null) then '#00cc00' else '#6800A2' end as Color\r\nfrom @tData d\r\nleft join @tPeaks dd on (d.ReadingDate = dd.OccDTM)\r\n\r\nselect MeterSerial, OccDTM, Peak from @tPeaks");
            migrationBuilder.Sql("CREATE OR ALTER proc [dbo].[spAlarmAnalyzePeakUsage]\r\n(\r\n@MeterSerialNo nvarchar(250),\r\n@ProfileStartDTM smalldatetime,\r\n@ProfileEndDTM smalldatetime,\r\n@PeakStartTime time = '05:00',\r\n@PeakEndTime time = '22:00',\r\n@Threshold decimal(18,4),\r\n@Duration int\r\n)\r\n\r\nAS\r\n\r\n--declare\r\n--@MeterSerialNo nvarchar(250) = '57770290',\r\n--@ProfileStartDTM smalldatetime = '2023-02-01 00:00',\r\n--@ProfileEndDTM smalldatetime = '2023-02-19 00:00',\r\n--@PeakStartTime time = '05:00',\r\n--@PeakEndTime time = '22:00',\r\n--@Threshold decimal(18,4) = 0.09,\r\n--@Duration int = 1\r\n\r\ndeclare\r\n@TimeDiff int,\r\n@iCnt int = 1,\r\n@iRows int,\r\n@NoAlarms int = 0\r\n\r\nset @Duration = @Duration * 30\r\n\r\ndeclare @tProfile table (Id int identity(1,1), ProfileId int, SerialNo varchar(250), ReadingDate smalldatetime, P1 decimal(18,4))\r\n\r\ninsert into @tProfile\r\nselect\r\np.Id, p.SerialNumber, p.ReadingDate, p.P1\r\nfrom\r\nScadaProfileData p (NOLOCK)\r\nwhere\r\np.SerialNumber = @MeterSerialNo\r\nand p.IsActive = 1\r\nand p.ReadingDate between @ProfileStartDTM and @ProfileEndDTM\r\norder by p.ReadingDate\r\n\r\nSELECT @TimeDiff =  DATEDIFF(MI, CONCAT('2023-04-01 ', @PeakStartTime), CONCAT(case when @PeakEndTime < @PeakStartTime then '2023-04-02 ' else '2023-04-01 ' end, @PeakEndTime)                    )\r\n\r\ndeclare @tOccs table (Id int identity(1,1), StartDTM smalldatetime, EndDTM smalldatetime, OccDTM smalldatetime, NextDTM smalldatetime, Duration int)\r\n\r\ninsert into @tOccs\r\nselect\r\nStartDTM, EndDTM, ReadingDate as OccDTM\r\n, LEAD(ReadingDate) OVER (order by ReadingDate) as NextOcc\r\n, 30 as Duration\r\nfrom\r\n(\r\nselect\r\na.StartDTM, a.EndDTM, p.ReadingDate\r\n, ISNULL(LAG(p.P1) OVER (Order by p.Id), 0) as PrevP1, P1\r\nfrom\r\n@tProfile p\r\njoin (\r\nselect\r\nId, SerialNo, ReadingDate as StartDTM, DATEADD(MI, @TimeDiff, ReadingDate) as EndDTM\r\nfrom\r\n@tProfile\r\nwhere\r\nDATEPART(HH, ReadingDate) = datepart(HH, @PeakStartTime)\r\nand DATEPART(MI, ReadingDate) = datepart(MI, @PeakStartTime)\r\n) a on (p.SerialNo = a.SerialNo and p.ReadingDate between a.StartDTM and a.EndDTM)\r\n) b\r\nwhere\r\nP1 >= @Threshold and PrevP1 < @Threshold\r\norder by ReadingDate\r\n\r\nset @iRows = @@ROWCOUNT\r\nset @iCnt = 1\r\n\r\ndeclare @SDTM smalldatetime, @EDTM smalldatetime, @OccDTM smalldatetime, @NextDTM smalldatetime, @Dur int\r\n\r\nwhile @iCnt <= @iRows\r\nbegin\r\n\tselect @SDTM = StartDTM, @EDTM = EndDTM, @OccDTM = OccDTM, @NextDTM = NextDTM from @tOccs where Id = @iCnt\r\n\r\nSELECT\r\n\t@Dur = ISNULL(SUM(DATEDIFF(MINUTE, t1.ReadingDate, t2.ReadingDate)), 0)\r\nFROM\r\n\t@tProfile t1\r\n\tJOIN @tProfile t2 ON t2.Id = t1.Id + 1\r\nWHERE\r\n\tt1.ReadingDate between @OccDTM and @EDTM\r\n\tand t2.ReadingDate >= @OccDTM and t2.ReadingDate < isnull(@NextDTM, @EDTM)\r\n\tand t1.P1 >= @Threshold AND t2.P1 >= @Threshold\r\n\r\nupdate @tOccs set Duration += @Dur where Id = @iCnt\r\nset @iCnt += 1\r\nend\r\n\r\ndeclare @tAlarms table (Id int identity(1,1), AlarmStart smalldatetime, AlarmEnd smalldatetime, Duration int)\r\ninsert into @tAlarms\r\nselect OccDTM as AlarmStart, DATEADD(MI, Duration, OccDTM) as AlarmEnd, Duration from @tOccs where Duration >= @Duration\r\n\r\ndeclare @tData table (Id int identity(1,1), ReadingDate smalldatetime, ActFlow decimal(18,4), Calculated bit)\r\n\r\ninsert into @tData\r\nselect\r\nconvert(varchar(16), d.ReadingDate, 120) as ReadingDate,\r\nActFlow = d.P1,\r\nCalculated = case when d.Status = 0 then 0 else 1 end\r\nfrom\r\nScadaProfileData d (NOLOCK)\r\nwhere\r\nd.SerialNumber = @MeterSerialNo\r\nand d.ReadingDate >= @ProfileStartDTM and d.ReadingDate <= @ProfileEndDTM\r\nand d.isActive = 1\r\norder by\r\nd.ReadingDate\r\n\r\nselect d.ReadingDate, d.ActFlow as ActFlow, d.Calculated\r\n,case when (dd.Id is null) then '#00cc00' else 'red' end as Color\r\nfrom @tData d\r\nleft join @tAlarms dd on (d.ReadingDate >= dd.AlarmStart and d.ReadingDate < dd.AlarmEnd)\r\n\r\nselect NoOfAlarms = count(1) from @tAlarms");
            migrationBuilder.Sql("CREATE OR ALTER proc [dbo].[spAlarmConfigAvgUsage]\r\n(\r\n@MeterSerialNo nvarchar(250),\r\n@ProfileStartDTM smalldatetime,\r\n@ProfileEndDTM smalldatetime,\r\n@AvgStartTime time,\r\n@AvgEndTime time\r\n)\r\n\r\nAS\r\n\r\n--declare\r\n--@MeterSerialNo nvarchar(250) = '57770290',\r\n--@ProfileStartDTM smalldatetime = '2023-02-01 00:00',\r\n--@ProfileEndDTM smalldatetime = '2023-02-18 23:59',\r\n--@AvgStartTime time = '08:00',\r\n--@AvgEndTime time = '20:00'\r\n\r\ndeclare\r\n@TimeDiff int\r\n\r\ndeclare @tProfile table (Id int identity(1,1), ProfileId int, SerialNo varchar(250), ReadingDate smalldatetime, P1 decimal(18,4))\r\n\r\ninsert into @tProfile\r\nselect\r\np.Id, p.SerialNumber, p.ReadingDate, p.P1\r\nfrom\r\nScadaProfileData p (NOLOCK)\r\nwhere\r\np.SerialNumber = @MeterSerialNo\r\nand p.IsActive = 1\r\nand p.ReadingDate between @ProfileStartDTM and @ProfileEndDTM\r\norder by p.ReadingDate\r\n\r\nSELECT @TimeDiff =  DATEDIFF(MI, CONCAT('2023-04-01 ', @AvgStartTime), CONCAT(case when @AvgEndTime < @AvgStartTime then '2023-04-02 ' else '2023-04-01 ' end, @AvgEndTime)                    )\r\n\r\ndeclare @tData table (Id int identity(1,1), ReadingDate smalldatetime, ActFlow decimal(18,4), Calculated bit)\r\n\r\ninsert into @tData\r\nselect\r\nconvert(varchar(16), d.ReadingDate, 120) as ReadingDate,\r\nActFlow = d.P1,\r\nCalculated = case when d.Status = 0 then 0 else 1 end\r\nfrom\r\nScadaProfileData d (NOLOCK)\r\nwhere\r\nd.SerialNumber = @MeterSerialNo\r\nand d.ReadingDate >= @ProfileStartDTM and d.ReadingDate <= @ProfileEndDTM\r\nand d.isActive = 1\r\norder by\r\nd.ReadingDate\r\n\r\nselect ReadingDate, ActFlow as ActFlow, Calculated\r\n,case when @AvgEndTime < @AvgStartTime and (\r\n\t( cast(ReadingDate as time(0)) >= @AvgStartTime and cast(ReadingDate as time(0)) < cast('1900-01-01 23:59' as time(0)) ) or\r\n\t( cast(ReadingDate as time(0)) >= cast('1900-01-01 00:00' as time(0)) and cast(ReadingDate as time(0)) < @AvgEndTime )) then '#FF6600'\r\nwhen @AvgEndTime >= @AvgStartTime and (\r\n\t( cast(ReadingDate as time(0)) between @AvgStartTime and @AvgEndTime )) then '#FF6600'\r\nelse '#00cc00' end as Color\r\nfrom @tData\r\n\r\nselect\r\nb.SerialNo as MeterSerial, MIN(b.ReadingStart) as PeriodStartDTM, MAX(b.ReadingEnd) as PeriodEndDTM\r\n, AVG(b.ProfileAverage) as IntervalAvg, AVG(b.AvgTotal) as PeriodAvg, MAX(b.ProfileAverage) as AvgPeak, MIN(b.ProfileAverage) as AvgMin\r\nfrom\r\n(\r\nselect\r\na.Id,\r\np.SerialNo,\r\na.StartDTM as ReadingStart,\r\na.EndDTM as ReadingEnd,\r\nAVG(p.P1) as ProfileAverage,\r\nSUM(p.P1/2) as AvgTotal,\r\nMAX(p.P1) as AvgPeak,\r\nMIN(p.P1) as AvgMin\r\nfrom\r\n@tProfile p\r\njoin\r\n(\r\nselect\r\nId, ProfileId, SerialNo, ReadingDate as StartDTM, DATEADD(MI, @TimeDiff, ReadingDate) as EndDTM\r\nfrom @tProfile\r\nwhere\r\nDATEPART(HH, ReadingDate) = DATEPART(HH, @AvgStartTime)\r\nand DATEPART(MI, ReadingDate) = DATEPART(MI, @AvgStartTime)\r\n) a on (p.SerialNo = a.SerialNo and p.ReadingDate between a.StartDTM and a.EndDTM)\r\ngroup by\r\na.Id, a.StartDTM, a.EndDTM, p.SerialNo\r\n) b\r\ngroup by b.SerialNo");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[spAlarmAnalyzeLeakDetection]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[spAlarmConfigPeakUsage]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[spAlarmAnalyzePeakUsage]");
            migrationBuilder.Sql("DROP PROCEDURE [dbo].[spAlarmConfigAvgUsage]");
        }
    }
}
