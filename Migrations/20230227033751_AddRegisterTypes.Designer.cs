// <auto-generated />
using System;
using ClientPortal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClientPortal.Migrations
{
    [DbContext(typeof(PortalDBContext))]
    [Migration("20230227033751_AddRegisterTypes")]
    partial class AddRegisterTypes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BuildingUser", b =>
                {
                    b.Property<int>("BuildingsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("BuildingsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("BuildingUser");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.AMRMeter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("CbSize")
                        .HasColumnType("int");

                    b.Property<string>("CommsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CtSizePrim")
                        .HasColumnType("int");

                    b.Property<int>("CtSizeSec")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Digits")
                        .HasColumnType("int");

                    b.Property<int>("MakeModelId")
                        .HasColumnType("int");

                    b.Property<string>("MeterNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MeterSerial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phase")
                        .HasColumnType("int");

                    b.Property<float>("ProgFact")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("MakeModelId");

                    b.HasIndex("MeterNo")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("AMRMeters");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.AMRScadaUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScadaPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScadaUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SgdUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AMRScadaUsers");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.AMRWaterProfileHeader", b =>
                {
                    b.Property<decimal>("DataPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaxFlow")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("MaxFlowDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<string>("MeterNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NightFlow")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PeriodUsage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.ToTable("AMRWaterProfileHeaders", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Partner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("UmfaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.BuildingSupplierUtility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("UtilityId")
                        .HasColumnType("int");

                    b.Property<int>("UtilitySupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("UtilityId");

                    b.HasIndex("UtilitySupplierId");

                    b.ToTable("BuildingSupplierUtilities");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.DemandProfile", b =>
                {
                    b.Property<decimal>("ActEnergy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Calculated")
                        .HasColumnType("bit");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Demand")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReActEnergy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("DemandProfiles", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.DemandProfileHeader", b =>
                {
                    b.Property<decimal>("DataPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaxDemand")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("MaxDemandDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<string>("MeterNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PeriodUsage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.ToTable("DemandProfileHeaders", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.MeterMakeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtilityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UtilityId");

                    b.ToTable("MetersMakeModels");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.PortalEntities.RegisterType", b =>
                {
                    b.Property<int>("RegisterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegisterTypeId"), 1L, 1);

                    b.Property<string>("RegisterTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegisterTypeId");

                    b.ToTable("RegisterTypes");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.PortalEntities.ScadaProfileData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<float>("P1")
                        .HasColumnType("real");

                    b.Property<float>("P2")
                        .HasColumnType("real");

                    b.Property<int>("ProcessedStatus")
                        .HasColumnType("int");

                    b.Property<float>("Q1")
                        .HasColumnType("real");

                    b.Property<float>("Q2")
                        .HasColumnType("real");

                    b.Property<float>("Q3")
                        .HasColumnType("real");

                    b.Property<float>("Q4")
                        .HasColumnType("real");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("kVA")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("ScadaProfileData");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.PortalEntities.ScadaReadingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("KvaResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("P1")
                        .HasColumnType("real");

                    b.Property<float>("P2")
                        .HasColumnType("real");

                    b.Property<int>("ProcessedStatus")
                        .HasColumnType("int");

                    b.Property<float>("Q1")
                        .HasColumnType("real");

                    b.Property<float>("Q2")
                        .HasColumnType("real");

                    b.Property<float>("Q3")
                        .HasColumnType("real");

                    b.Property<float>("Q4")
                        .HasColumnType("real");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReadingResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReadingStatus")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("kVA")
                        .HasColumnType("real");

                    b.Property<DateTime>("kvaDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("scadaReadingData");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.ProfileData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("ActiveEnergyReading")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ActiveEnergyUsage")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("AmrMeterId")
                        .HasColumnType("int");

                    b.Property<bool>("Calculated")
                        .HasColumnType("bit");

                    b.Property<int>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<decimal>("DemandReading")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal>("ReActiveEnergyReading")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ReActiveEnergyUsage")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("ReadingDTM")
                        .HasColumnType("datetime2");

                    b.Property<int>("TouDaysOfWeekId")
                        .HasColumnType("int");

                    b.Property<int>("TouHalfHourId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmrMeterId");

                    b.HasIndex("TouDaysOfWeekId");

                    b.HasIndex("TouHalfHourId");

                    b.ToTable("ProfileData");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevokedDtm")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.ScadaRequestDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AmrMeterId")
                        .HasColumnType("int");

                    b.Property<int>("AmrScadaUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CurrentRunDTM")
                        .HasColumnType("datetime2");

                    b.Property<int>("HeaderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastDataDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastRunDTM")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdateFrequency")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmrMeterId");

                    b.HasIndex("AmrScadaUserId");

                    b.HasIndex("HeaderId");

                    b.ToTable("ScadaRequestDetails");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.ScadaRequestHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDTM")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CurrentRunDTM")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastRunDTM")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartRunDTM")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScadaRequestHeaders");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TariffHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AmpEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmpStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DemandEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DemandStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TOUHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("TariffCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TariffDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransmissionZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtilitySupplierId")
                        .HasColumnType("int");

                    b.Property<string>("VoltageEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoltageStart")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TOUHeaderId");

                    b.HasIndex("UtilitySupplierId");

                    b.ToTable("TariffHeaders");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("TOUDaysOfWeekId")
                        .HasColumnType("int");

                    b.Property<int>("TOUHalfHourId")
                        .HasColumnType("int");

                    b.Property<int>("TOURegisterId")
                        .HasColumnType("int");

                    b.Property<int>("TariffHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TOUDaysOfWeekId");

                    b.HasIndex("TOUHalfHourId");

                    b.HasIndex("TOURegisterId");

                    b.HasIndex("TariffHeaderId");

                    b.ToTable("TOUAllocations");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUDayOfWeekDayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("TOUDayTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TOUDaysOfWeekId")
                        .HasColumnType("int");

                    b.Property<int>("TOUHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TOUDayTypeId");

                    b.HasIndex("TOUDaysOfWeekId");

                    b.HasIndex("TOUHeaderId");

                    b.ToTable("TOUDayOfWeekDayTypes");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUDaysOfWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DayNr")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TOUDaysOfWeeks");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUDayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TOUDayTypes");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUHalfHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("End")
                        .HasColumnType("time");

                    b.Property<int>("HalfHourNr")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("TOUHalfHours");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtilitySupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UtilitySupplierId");

                    b.ToTable("TOUHeaders");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUProfileAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("TOUDayTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TOUHalfHourId")
                        .HasColumnType("int");

                    b.Property<int>("TOUHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("TOURegisterId")
                        .HasColumnType("int");

                    b.Property<int>("TOUSeasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TOUDayTypeId");

                    b.HasIndex("TOUHalfHourId");

                    b.HasIndex("TOUHeaderId");

                    b.HasIndex("TOURegisterId");

                    b.HasIndex("TOUSeasonId");

                    b.ToTable("TOUProfileAssignments");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOURegister", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TOURegisters");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TOUHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TOUHeaderId");

                    b.ToTable("TOUSeasons");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUSeasonMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("MonthNo")
                        .HasColumnType("int");

                    b.Property<int>("TOUSeasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TOUSeasonId");

                    b.ToTable("TOUSeasonMonths");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UmfaId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.Utility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Utilities");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.UtilitySupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("SupplierDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UtilitySuppliers");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.WaterProfile", b =>
                {
                    b.Property<decimal>("ActFlow")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Calculated")
                        .HasColumnType("bit");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("datetime2");

                    b.ToTable("WaterProfiles", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("BuildingUser", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.Building", null)
                        .WithMany()
                        .HasForeignKey("BuildingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.AMRMeter", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.Building", "Building")
                        .WithMany("AMRMeters")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.MeterMakeModel", "MakeModel")
                        .WithMany("AMRMeters")
                        .HasForeignKey("MakeModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.User", "User")
                        .WithMany("AmrMeters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("MakeModel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.AMRScadaUser", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.User", "User")
                        .WithMany("AmrScadaUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.BuildingSupplierUtility", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.Building", "Building")
                        .WithMany("BuildingSupplierUtilities")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.Utility", "Utility")
                        .WithMany("BuildingSupplierUtilities")
                        .HasForeignKey("UtilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.UtilitySupplier", "UtilitySupplier")
                        .WithMany("BuildingSupplierUtilities")
                        .HasForeignKey("UtilitySupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Utility");

                    b.Navigation("UtilitySupplier");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.MeterMakeModel", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.Utility", "Utility")
                        .WithMany("MeterMakeModels")
                        .HasForeignKey("UtilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Utility");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.ProfileData", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.AMRMeter", "AmrMeter")
                        .WithMany("ProfileData")
                        .HasForeignKey("AmrMeterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.TOUDaysOfWeek", "TouDaysOfWeek")
                        .WithMany("ProfileData")
                        .HasForeignKey("TouDaysOfWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.TOUHalfHour", "TOUHalfHour")
                        .WithMany("ProfileData")
                        .HasForeignKey("TouHalfHourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AmrMeter");

                    b.Navigation("TOUHalfHour");

                    b.Navigation("TouDaysOfWeek");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.RefreshToken", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.ScadaRequestDetail", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.AMRMeter", "AmrMeter")
                        .WithMany("ScadaRequestDetails")
                        .HasForeignKey("AmrMeterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.AMRScadaUser", "AmrScadaUser")
                        .WithMany("ScadaRequestDetails")
                        .HasForeignKey("AmrScadaUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.ScadaRequestHeader", "Header")
                        .WithMany("ScadaRequestDetails")
                        .HasForeignKey("HeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AmrMeter");

                    b.Navigation("AmrScadaUser");

                    b.Navigation("Header");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TariffHeader", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.TOUHeader", "TOUHeader")
                        .WithMany("TariffHeaders")
                        .HasForeignKey("TOUHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.UtilitySupplier", "UtilitySupplier")
                        .WithMany("TariffHeaders")
                        .HasForeignKey("UtilitySupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TOUHeader");

                    b.Navigation("UtilitySupplier");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUAllocation", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.TOUDaysOfWeek", "TOUDaysOfWeek")
                        .WithMany("TOUAllocations")
                        .HasForeignKey("TOUDaysOfWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.TOUHalfHour", "TOUHalfHour")
                        .WithMany("TOUAllocations")
                        .HasForeignKey("TOUHalfHourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.TOURegister", "TOURegister")
                        .WithMany("TOUAllocations")
                        .HasForeignKey("TOURegisterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.TariffHeader", "TariffHeader")
                        .WithMany("TOUAllocations")
                        .HasForeignKey("TariffHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TOUDaysOfWeek");

                    b.Navigation("TOUHalfHour");

                    b.Navigation("TOURegister");

                    b.Navigation("TariffHeader");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUDayOfWeekDayType", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.TOUDayType", "TOUDayType")
                        .WithMany("TOUDayOfWeekDayTypes")
                        .HasForeignKey("TOUDayTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.TOUDaysOfWeek", "TOUDaysOfWeek")
                        .WithMany("TOUDayOfWeekDayTypes")
                        .HasForeignKey("TOUDaysOfWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.TOUHeader", "TOUHeader")
                        .WithMany("TOUDayOfWeekDayTypes")
                        .HasForeignKey("TOUHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TOUDayType");

                    b.Navigation("TOUDaysOfWeek");

                    b.Navigation("TOUHeader");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUHeader", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.UtilitySupplier", "UtilitySupplier")
                        .WithMany("TOUHeaders")
                        .HasForeignKey("UtilitySupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UtilitySupplier");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUProfileAssignment", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.TOUDayType", "TOUDayType")
                        .WithMany("TOUProfileAssignments")
                        .HasForeignKey("TOUDayTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.TOUHalfHour", "TOUHalfHour")
                        .WithMany("TOUProfileAssigments")
                        .HasForeignKey("TOUHalfHourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.TOUHeader", "TOUHeader")
                        .WithMany("TOUProfileAssignments")
                        .HasForeignKey("TOUHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.TOURegister", "TOURegister")
                        .WithMany("TOUProfileAssignments")
                        .HasForeignKey("TOURegisterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClientPortal.Data.Entities.TOUSeason", "TOUSeason")
                        .WithMany("TOUProfileAssignments")
                        .HasForeignKey("TOUSeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TOUDayType");

                    b.Navigation("TOUHalfHour");

                    b.Navigation("TOUHeader");

                    b.Navigation("TOURegister");

                    b.Navigation("TOUSeason");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUSeason", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.TOUHeader", "TOUHeader")
                        .WithMany("TOUSeasons")
                        .HasForeignKey("TOUHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TOUHeader");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUSeasonMonth", b =>
                {
                    b.HasOne("ClientPortal.Data.Entities.TOUSeason", "TOUSeason")
                        .WithMany("TOUSeasonMonths")
                        .HasForeignKey("TOUSeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TOUSeason");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.AMRMeter", b =>
                {
                    b.Navigation("ProfileData");

                    b.Navigation("ScadaRequestDetails");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.AMRScadaUser", b =>
                {
                    b.Navigation("ScadaRequestDetails");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.Building", b =>
                {
                    b.Navigation("AMRMeters");

                    b.Navigation("BuildingSupplierUtilities");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.MeterMakeModel", b =>
                {
                    b.Navigation("AMRMeters");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.ScadaRequestHeader", b =>
                {
                    b.Navigation("ScadaRequestDetails");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TariffHeader", b =>
                {
                    b.Navigation("TOUAllocations");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUDaysOfWeek", b =>
                {
                    b.Navigation("ProfileData");

                    b.Navigation("TOUAllocations");

                    b.Navigation("TOUDayOfWeekDayTypes");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUDayType", b =>
                {
                    b.Navigation("TOUDayOfWeekDayTypes");

                    b.Navigation("TOUProfileAssignments");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUHalfHour", b =>
                {
                    b.Navigation("ProfileData");

                    b.Navigation("TOUAllocations");

                    b.Navigation("TOUProfileAssigments");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUHeader", b =>
                {
                    b.Navigation("TOUDayOfWeekDayTypes");

                    b.Navigation("TOUProfileAssignments");

                    b.Navigation("TOUSeasons");

                    b.Navigation("TariffHeaders");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOURegister", b =>
                {
                    b.Navigation("TOUAllocations");

                    b.Navigation("TOUProfileAssignments");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.TOUSeason", b =>
                {
                    b.Navigation("TOUProfileAssignments");

                    b.Navigation("TOUSeasonMonths");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.User", b =>
                {
                    b.Navigation("AmrMeters");

                    b.Navigation("AmrScadaUsers");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.Utility", b =>
                {
                    b.Navigation("BuildingSupplierUtilities");

                    b.Navigation("MeterMakeModels");
                });

            modelBuilder.Entity("ClientPortal.Data.Entities.UtilitySupplier", b =>
                {
                    b.Navigation("BuildingSupplierUtilities");

                    b.Navigation("TOUHeaders");

                    b.Navigation("TariffHeaders");
                });
#pragma warning restore 612, 618
        }
    }
}
